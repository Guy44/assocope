<?php
/***********************************************************************
 ATK Node: v_organisme_inscription
Table: v_organisme_inscription
Date: 07/30/07


This code was automatically generated by ATK Code Generator v2.2

@Author Jorge Garifuna (GariDigital.com) <info@GariDigital.com>

Your are free to modify this code to fit your needs.
All I ask for is for your to keep this notice on top of the code
************************************************************************/
atkimport("atk.atkmetanode");
atkimport("atk.utils.atkmessagequeue");
require (atkconfig("atkroot")."modules/GChartPhp/gChart.php");
include (atkconfig("atkroot")."modules/GChartPhp/tableExtractor.class.php");
include (atkconfig("atkroot")."modules/GChartPhp/phpDump.class.php");


class rencontres extends atkManyToOneRelation {
	function loadType() {
		return NOLOAD;
	}
	function storageType() {
		return NOSTORE;
	}
}
class v_organisme_inscription extends assMetaNode {
	var $table = "v_organisme_inscription";
	var $primary_field = "";
	var $module = "organisme";
	var $node = "v_organisme_inscription";
	var $index_field = "organisme";
	var $order_field = "type";
	var $descriptor_field = "[organisme]";
	// start constructor
	function v_organisme_inscription() {
		// tabs labels
		// call constructor parent
		$this->atkMetaNode(array (
				"flags" => NF_READONLY | NF_MRA
		));
		//event log
		$this->addListener(atknew("atk.utils.atkeventlog"));
		// node attributes
		$this->add(new atkRowCounter("#"), NULL, 1);
		$this->add(new atkAttribute("organisme", AF_HIDE_LIST), NULL, 50);
		$this->add(new atkAttribute("type", 0), NULL, 100);
		$this->add(new atkAttribute("nombre", AF_HIDE_LIST  | AF_FORCE_LOAD ), NULL, 200);
		$this->add(new atkDummyAttribute("nombre_cotisations_dues", "Cotisations_dûes", AF_DUMMY_SHOW_LABEL|AF_HIDE_LIST), NULL, 201);

		$this->add(new atkBoolAttribute("lettre_o_n", AF_HIDE_LIST), NULL, 300);
		$this->add(new atkBoolAttribute("infolettre_o_n", AF_HIDE_LIST), NULL, 400);
		$this->add(new atkBoolAttribute("flash_info_o_n", AF_HIDE_LIST), NULL, 450);
		$this->add(new atkBoolAttribute("cotisation_organisme_o_n", AF_HIDE_LIST), NULL, 500);
		$this->add(new atkBoolAttribute("cotisation_federation_o_n", AF_HIDE_LIST), NULL, 600);
		$this->add(new atkBoolAttribute("carte_o_n", AF_HIDE_LIST), NULL, 700);
		$this->add(new atkBoolAttribute("timbre_o_n", AF_HIDE_LIST), NULL, 800);
		$this->add(new atkNumberAttribute("delai_radiation_non_adhesion", AF_HIDE_LIST, 10, 0), NULL, 900);
		$this->add(new atkNumberAttribute("delai_radiation_non_cotisation", AF_HIDE_LIST, 10, 0), NULL, 1000);

		$this->add(new atkNumberAttribute("id_organisme", AF_PRIMARY | AF_HIDE_EDIT | AF_HIDE_LIST, 10, 0), NULL, 1100);
		$this->add(new atkNumberAttribute("id_type_inscription", AF_PRIMARY | AF_HIDE_EDIT | AF_HIDE_LIST, 10, 0), NULL, 1200);
		$this->add(new atkDummyAttribute("stats_inscriptions", "Statistiques", AF_DUMMY_SHOW_LABEL), NULL, 206);
		$this->add(new atkDummyAttribute("stats_inscriptions_graphique", "Graphique", 0), NULL, 207);


		//	$this->add(new atkDummyAttribute("inscriptions", "Inscriptions", AF_DUMMY_SHOW_LABEL), NULL, 201);
		//	$this->add(new atkDummyAttribute("adhesions", "Adhésions", AF_DUMMY_SHOW_LABEL), NULL, 202);
		//	$this->add(new atkDummyAttribute("radiations", "Radiations", AF_DUMMY_SHOW_LABEL), NULL, 203);
		//	$this->add(new atkDummyAttribute("cotisations", "Cotisations", AF_DUMMY_SHOW_LABEL), NULL, 204);
		//	$this->add(new atkDummyAttribute("cotisations_federation", "Cotisations_fédération", AF_DUMMY_SHOW_LABEL), NULL, 205);
		$this->add(new atkDummyAttribute("rappels", "Rappels", AF_DUMMY_SHOW_LABEL| AF_HIDE_LIST), NULL, 202);

		//			$this->add(new rencontres("id_rencontre", "organisme.rencontre", AF_RELATION_AUTOLINK | AF_RELATION_AUTOCOMPLETE));
		$this->setExtendedSearchAction('smartsearch');
		$this->setSecurityAlias("organisme.organisme");
		$this->m_securityMap["inscrire_du_presse_papier"] = "view";
		$this->m_securityMap["liste_inscrits"] = "view";
		$this->m_securityMap["liste_organismes_inscrits"] = "view";
		$this->m_securityMap["cotisation_payee"] = "view";
		$this->m_securityMap["cotisation_due"] = "view";
		$this->m_securityMap["courriel_cotisation_due"] = "view";
		include_once (atkconfig("atkroot") . "modules/include/actions.inc");
		//		$this->setIndex($this->index_field); // set index attribute
		$this->setOrder($this->order_field); // set order attribute(s)
		$this->setTable($this->table); // set node table

	} // end constructor
	function meta(& $policy) {
	} // end function
	function nombre_display($record, $mode) {
		if ($record["nombre"] > 0) {
			return href(dispatch_url("individu.inscription_i", "admin", array (
					'atkfilter' => "individu_inscription.id_organisme=" . $record['id_organisme'] . " and individu_inscription.id_type_inscription=" . $record['id_type_inscription'] . ""
			), "dispatch.php"), text($record["nombre"]), SESSION_NESTED);
		} else {
			return "";
		}
	}

	function recordActions($rec, &$actions, &$mraactions)
	{
		parent::recordActions($rec, $actions, $mraactions);
		$mraactions['exportations'] = "exportations";
		$mraactions['liste_inscrits'] = "liste_inscrits";
		$mraactions['cotisation_payee'] = "cotisation_payee";
		$mraactions['cotisation_due'] = "cotisation_due";
		$mraactions['courriel_cotisation_due'] = "courriel_cotisation_due";
		$actions["inscrire_du_presse_papier"] = session_url("dispatch.php?atknodetype=" . $this->atkNodeType() . "&atkaction=inscrire_du_presse_papier&atkselector=[pk]", SESSION_NESTED);
		$actions["liste_inscrits"] = session_url("dispatch.php?atknodetype=" . $this->atkNodeType() . "&atkaction=liste_inscrits&atkselector=[pk]", SESSION_NESTED);
		$mraactions['liste_organismes_inscrits'] = "liste_organismes_inscrits";

	}

	function action_liste_organismes_inscrits() {

		if (is_array($this->m_postvars["atkselector"])) {
			$select = $this->m_postvars["atkselector"];
		} else {
			$select[0] = $this->m_postvars["atkselector"];
		}
		$db = & atkGetDb();
		foreach ($select as $id_variable) {
			$array_1 = explode('AND', $id_variable);
			$array_organisme = $array_1[0];
			$array_type = explode('=', $array_1[1]);
			$chaineidfonction .= $array_type[1] . ',';
		}
		$array_organisme = str_replace("v_organisme_inscription", "individu_inscription", $array_organisme);
		$chaineidfonction = substr($chaineidfonction, 0, strlen($chaineidfonction) - 1);
		$idinscriptions = $chaineidfonction;
			
		$sql = 'select distinct id_organisme_inscrit from individu_inscription
				where ' . $array_organisme . ' and date_radiation is null and id_type_inscription in (' . $idinscriptions . ')';
		$data = $db->getrows($sql);
		for ($i = 0; $i < count($data); $i++) {
			if ($data[$i]["id_organisme_inscrit"]!="")
			{
				$chaineidorganisme .= $data[$i]["id_organisme_inscrit"] . ',';
			}

		}
		$idorganismes = substr($chaineidorganisme, 0, strlen($chaineidorganisme) - 1);
		if ($idorganismes=="")
		{
			return true;
		}
		$url = dispatch_url("organisme.organisme", "liste_organismes", array (
				"idorganismes" => $idorganismes,
				"atkcode" => 'liste_organismes',
				"atkexport" => 'n'
		));
		header("Location: $url");
		exit;
	}




	function action_exportations() {
		if (is_array($this->m_postvars["atkselector"])) {
			$select = $this->m_postvars["atkselector"];
		} else {
			$select[0] = $this->m_postvars["atkselector"];
		}
		$this->traitement_select($select, $idorganisme, $idindividus, $idinscriptions);
		$url = dispatch_url("organisme.organisme", "listeecran", array (
				"id" => $idorganisme,
				"idindividus" => $idindividus,
				"idinscriptions" => $idinscriptions,
				"atkcode" => '1',
				"atkexport" => 'o'
		));
		header("Location: $url");
		exit;
	}
	function action_liste_inscrits() {
		if (is_array($this->m_postvars["atkselector"])) {
			$select = $this->m_postvars["atkselector"];
		} else {
			$select[0] = $this->m_postvars["atkselector"];
		}
		$this->traitement_select($select, $idorganisme, $idindividus, $idinscriptions);
		$url = dispatch_url("organisme.organisme", "listeecran", array (
				"id" => $idorganisme,
				"idindividus" => $idindividus,
				"idinscriptions" => $idinscriptions,
				"atkcode" => '30',
				"atkexport" => 'o'
		));
		header("Location: $url");
		exit;
	}
	function action_cotisation_payee() {
		if (is_array($this->m_postvars["atkselector"])) {
			$select = $this->m_postvars["atkselector"];
		} else {
			$select[0] = $this->m_postvars["atkselector"];
		}
		$this->traitement_select($select, $idorganisme, $idindividus);
		$db = & atkGetDb();
		$sql="SELECT ic.id_individu from individu_cotisation ic, organisme_cotisation oc
		where ic.id_individu in ($idindividus) and ic.id_cotisation = oc.id and oc.annee=YEAR(NOW()) and oc.id_organisme=$idorganisme ";
		$data = $db->getrows($sql);
		for ($i = 0; $i < count($data); $i++) {
			$chaineidindividu .= $data[$i]["id_individu"] . ',';
		}
		$idindividus = substr($chaineidindividu, 0, strlen($chaineidindividu) - 1);
		$url = dispatch_url("organisme.organisme", "listeecran", array (
				"id" => $idorganisme,
				"idindividus" => $idindividus,
				"atkcode" => '21'
		));
		header("Location: $url");
		exit;
	}
	function nombre_cotisations_dues_display ($record, $mode) {
		$db = & atkGetDb();
		$sql="SELECT cotisation_organisme_o_n from individu_inscription ii, type_inscription ti
				where ii.id_type_inscription=".$record["id_type_inscription"]."
						and ii.id_type_inscription=ti.id";
		$data = $db->getrows($sql);
		$cotisation_organisme_o_n=$data[0]["cotisation_organisme_o_n"];
		if ($cotisation_organisme_o_n=='0') {
			return 0;
		}

		$sql="SELECT COUNT(ii.id_individu) as nombre from individu_inscription ii
				where ii.id_type_inscription=".$record["id_type_inscription"]."
						and ii.id_organisme=".$record["id_organisme"]."
								and ii.date_radiation is null
								and ii.id_individu not in
								(
								SELECT ic.id_individu from individu_cotisation ic, organisme_cotisation oc
								where ic.id_cotisation = oc.id and oc.annee=YEAR(NOW()) and oc.id_organisme=".$record["id_organisme"]."
										)"		;

		$data = $db->getrows($sql);
		$nombre=$data[0]["nombre"];
		$filter=" individu_inscription.id_type_inscription=".$record["id_type_inscription"]."
				and individu_inscription.id_organisme=".$record["id_organisme"]."
						and individu_inscription.date_radiation is null
						and individu_inscription.id_individu not in
						(
						SELECT ic.id_individu from individu_cotisation ic, organisme_cotisation oc
						where ic.id_cotisation = oc.id and oc.annee=YEAR(NOW()) and oc.id_organisme=".$record["id_organisme"]."
								)";

		if ($nombre > 0) {
			return href(dispatch_url("individu.inscription_i", "admin", array (
					'atkfilter' => $filter
			), "dispatch.php"), text($nombre), SESSION_NESTED);
		} else {
			return "";
		}
	}

	function nombre_cotisations_payees_display ($record, $mode) {
		$db = & atkGetDb();
		$sql="SELECT cotisation_organisme_o_n from individu_inscription ii, type_inscription ti
				where ii.id_type_inscription=".$record["id_type_inscription"]."
						and ii.id_type_inscription=ti.id";
		$data = $db->getrows($sql);
		$cotisation_organisme_o_n=$data[0]["cotisation_organisme_o_n"];
		if ($cotisation_organisme_o_n=='0') {
			return 0;
		}

		$sql="SELECT COUNT(ii.id_individu) as nombre from individu_inscription ii
				where ii.id_type_inscription=".$record["id_type_inscription"]."
						and ii.id_organisme=".$record["id_organisme"]."
								and ii.date_radiation is null
								and ii.id_individu  in
								(
								SELECT ic.id_individu from individu_cotisation ic, organisme_cotisation oc
								where ic.id_cotisation = oc.id and oc.annee=YEAR(NOW()) and oc.id_organisme=".$record["id_organisme"]."
										)"		;

		$data = $db->getrows($sql);
		$nombre=$data[0]["nombre"];
		$filter=" individu_inscription.id_type_inscription=".$record["id_type_inscription"]."
				and individu_inscription.id_organisme=".$record["id_organisme"]."
						and individu_inscription.date_radiation is null
						and individu_inscription.id_individu  in
						(
						SELECT ic.id_individu from individu_cotisation ic, organisme_cotisation oc
						where ic.id_cotisation = oc.id and oc.annee=YEAR(NOW()) and oc.id_organisme=".$record["id_organisme"]."
								)";

		if ($nombre > 0) {
			return href(dispatch_url("individu.inscription_i", "admin", array (
					'atkfilter' => $filter
			), "dispatch.php"), text($nombre), SESSION_NESTED);
		} else {
			return "";
		}
	}

	function action_cotisation_due() {
		if (is_array($this->m_postvars["atkselector"])) {
			$select = $this->m_postvars["atkselector"];
		} else {
			$select[0] = $this->m_postvars["atkselector"];
		}
		$this->traitement_select($select, $idorganisme, $idindividus, $idinscriptions);
		$db = & atkGetDb();
		$sql="SELECT ii.id_individu  from individu_inscription ii, type_inscription ti
		where  ii.id_organisme=$idorganisme
		and ii.id_type_inscription in ($idinscriptions)
		and ii.date_radiation is null
		and ii.id_type_inscription=ti.id
		and ti.cotisation_organisme_o_n=1

		and ii.id_individu not in
		( SELECT ic.id_individu from individu_cotisation ic, organisme_cotisation oc
		where ic.id_individu in ($idindividus) and ic.id_cotisation = oc.id and oc.annee=YEAR(NOW()) and oc.id_organisme=$idorganisme )";
		//$this->p($sql);
		$data = $db->getrows($sql);
		for ($i = 0; $i < count($data); $i++) {
			$chaineidindividu .= $data[$i]["id_individu"] . ',';
		}
		$idindividus = substr($chaineidindividu, 0, strlen($chaineidindividu) - 1);
		$url = dispatch_url("organisme.organisme", "listeecran", array (
				"id" => $idorganisme,
				"idindividus" => $idindividus,
				"atkcode" => '21'
		));
		//			$this->p($url);
		header("Location: $url");
		exit;
	}

	function action_courriel_cotisation_due() {
		if (is_array($this->m_postvars["atkselector"])) {
			$select = $this->m_postvars["atkselector"];
		} else {
			$select[0] = $this->m_postvars["atkselector"];
		}
		$this->traitement_select($select, $idorganisme, $idindividus, $idinscriptions);
		$db = & atkGetDb();
		$sql="SELECT ii.id_individu  from individu_inscription ii, type_inscription ti
		where  ii.id_organisme=$idorganisme
		and ii.id_type_inscription in ($idinscriptions)
		and ii.date_radiation is null
		and ii.id_type_inscription=ti.id
		and ti.cotisation_organisme_o_n=1

		and ii.id_individu not in
		( SELECT ic.id_individu from individu_cotisation ic, organisme_cotisation oc
		where ic.id_individu in ($idindividus) and ic.id_cotisation = oc.id and oc.annee=YEAR(NOW()) and oc.id_organisme=$idorganisme )";
		//$this->p($sql);
		$data = $db->getrows($sql);
		for ($i = 0; $i < count($data); $i++) {
			$chaineidindividu .= $data[$i]["id_individu"] . ',';
		}
		$idindividus = substr($chaineidindividu, 0, strlen($chaineidindividu) - 1);


		$url = dispatch_url("organisme.organisme", "listeecran", array (
				"id" => $idorganisme,
				"idindividus" => $idindividus,
				"atkcode" => '9'
		));
		header("Location: $url");
		exit;

	}




	function traitement_select($select, & $idorganisme, & $idindividus, & $idinscriptions) {
		$db = & atkGetDb();
		foreach ($select as $id_variable) {
			$array_1 = explode('AND', $id_variable);
			$array_organisme = $array_1[0];
			$array_type = explode('=', $array_1[1]);
			$chaineidfonction .= $array_type[1] . ',';
		}
		$array_organisme = str_replace("v_organisme_inscription", "individu_inscription", $array_organisme);
		$chaineidfonction = substr($chaineidfonction, 0, strlen($chaineidfonction) - 1);
		$idinscriptions = $chaineidfonction;
		$sql = 'select distinct id_individu from individu_inscription
				where ' . $array_organisme . ' and date_radiation is null and id_type_inscription in (' . $chaineidfonction . ')';
		$data = $db->getrows($sql);
		for ($i = 0; $i < count($data); $i++) {
			$chaineidindividu .= $data[$i]["id_individu"] . ',';
		}
		$idindividus = substr($chaineidindividu, 0, strlen($chaineidindividu) - 1);
		$idorg = explode('=', $array_organisme);
		$idorganisme = $idorg[1];
		return true;
	}


	function action_admin(& $handler) {
		global $config_recordsperpage;
		$config_recordsperpage = 50;
		return $handler->action_admin();
	}
	function nombre_edit($record, $mode) {
		if ($record["nombre"] > 0) {
			return href(dispatch_url("individu.inscription_i", "admin", array (
					'atkfilter' => "individu_inscription.id_organisme=" . $record['id_organisme'] . " and individu_inscription.id_type_inscription=" . $record['id_type_inscription'] . ""
			), "dispatch.php"), text($record["nombre"]), SESSION_NESTED);
		} else {
			return "";
		}
	}
	function action_save(& $handler) {
		$attr = & $this->getAttribute($this->primary_field);
		$attr->removeFlag(AF_PRIMARY);
		return $handler->action_save();
	} // end function
	function organisme_display($record, $mode) {
		return $this->descripteur_organisme($record["id_organisme"],'n','o','50');
	}
	/*	function organisme_display($record, $mode) {
		$attr = & $this->getAttribute("organisme");
	$original = $attr->display($record, $mode);
	$pparams[$this->primary_field] = $record[$this->primary_field];
	$pparams["atkselector"] = $this->node . "." . $this->primary_field . "='" . $record[$this->primary_field] . "'";
	// link name
	$original = href(dispatch_url($this->module . "." . $this->node, "view", $pparams, "dispatch.php"), $original, SESSION_NESTED);
	return $original;
	} // end function
	*/
	/* START NODE MESSAGING */
	// this function is automatically called after a record has been updated
	function postUpdate($record) {
		// notify the user that the record has been updated
		$this->printMessage("Record, " . $record[$this->index_field] . ", Updated Successfully");
		return true;
	}
	// this function is automatically called after a record has been deleted
	function postDelete($record) {
		// notify the user that the record has been deleted
		$this->printMessage("Record, " . $record[$this->index_field] . ", Deleted Successfully");
		return true;
	}
	// this function is automatically called after a record has been added
	function postAdd(& $record) {
		$this->getMyLastId($record);
		// notify the user that the record has been created
		$this->printMessage("Record, " . $record[$this->index_field] . ", Created Successfully");
		return true;
	}
	/*
	 Jorge Garifuna - info@garidigital.com
	created: 9/12/06

	this function obtains the last inserted id of specified table
	*/
	function getMyLastId(& $record) {
		$db = & atkGetDb();
		// get the id of the last record that was inserted
		$query = "select max(" . $this->primary_field . ") as last_id from " . $this->table;
		$rows = $db->getrows($query);
		if (count($rows) > 0) {
			$id = $rows[0]["last_id"];
			$record[$this->primary_field] = $id;
			$record["atkprimkey"] = $this->node . "." . $this->primary_field . "='$id'";
		}
	}
	/*
	 This function is a wrapper to print messages to the top of the screen
	Author: Jorge Garifuna (GariDigital.com) <info@GariDigital.com>
	Created Date: 6/27/06

	@param $message               The actual message to be printed
	@param $background_color      The background color of the bar to show message
	@param $text_color            The color of the text to be printed

	Note:
	- If your visual creativity is bad like mine, you can find nice colors at the following site:
	http://www.colorcombos.com/index.html

	- Make sure to include "atkimport("atk.utils.atkmessagequeue");" at the top of your node

	*/
	function printMessage($message, $background_color = '#6787B0', $text_color = 'white') {
		atkMessageQueue :: addMessage("<div style='background-color: " . $background_color . ";'><b><font color='" . $text_color . "'>" . $message . "</font></b></div>"); //     FFAB35
	}
	/* END NODE MESSAGING */
	function descriptor_def() {
		return $this->descriptor_field;
	}
	// used for header section of list view page
	function adminHeader() {
		// get messages from the queue
		$msgs = atkMessageQueue :: getMessages();
		if (count($msgs) > 0) {
			$msgs = implode("<br>", $msgs);
		} else {
			$msgs = "";
		}
		$help_text = $msgs . "

				<!-- h1><font color=#FF6347>v_organisme_inscription</font></h1 -->
				";
		return $help_text;
	} // end function
	// used for footer section of list view page
	// this function is called when editing an individual record
	// any information here will be displayed on the footer section of the edited record page
	function editPage(& $handler, $record, $locked = false) {
		return $this->detailPageFooter($handler, $record, $locked);
	}
	// this function is called when viewing an individual record
	// any information here will be displayed on the footer section of the viewed record page
	function viewPage(& $handler, $record, $locked = false) {
		return $this->detailPageFooter($handler, $record, $locked, "view");
	}
	// this is a custom helper function for editPage and viewPage
	// you can consolidate operations here unless you need to display different information
	// when editing and viewing the record
	// the information will be displayed on the footer page when editing or viewing an individual record
	function detailPageFooter(& $handler, $record, $locked = false, $mode = "edit") {
		if ($mode == "view") {
			$page = $handler->viewPage($record, $locked);
		} else { // edit
			$page = $handler->editPage($record, $locked);
		}
		$data_info = "";
		$page .= $data_info;
		return $page;
	} // end function
	function action_inscrire_du_presse_papier() {
		$cleprimaire = explode('AND', $this->m_postvars["atkselector"]);
		$organisme=explode('=', $cleprimaire[0]);
		$id_organisme=$organisme[1];
		$inscription=explode('=', $cleprimaire[1]);
		$id_typeinscription=$inscription[1];
		//		$this->p($this->m_postvars["atkselector"]);

		$user = getUser();
		$userid = $user["id"];
		global $g_sessionManager;
		//		$id_individu_1 = $g_sessionManager->getValue("atgIdIndividuUtilisateur", "globals");
		$userid = $user["id"];
		$nom_variable = "id_individu";
		$db = & atkGetDb();
		$requete = "SELECT distinct id_variable FROM tmp_copier_coller where nom_variable='id_individu' and id_utilisateur='" . $userid . "' ";
		$data = $db->getrows($requete);
		//		$this->p($data);
		if (count($data) == 0) {
			$db->commit();
			$this->redirect();
		}


		foreach ($data as $id_individu) {
			$id_individu_1 = $id_individu["id_variable"];
			$sql="SELECT id_individu from individu_inscription where id_organisme=$id_organisme and id_individu=$id_individu_1";
			$data1 = $db->getrows($sql);

			if (count($data1)==0)
			{
				$data1 = $db->getrows("SELECT prochain_id_inscription FROM organisme where id=$id_organisme ");
				$id_inscription = $data1[0]["prochain_id_inscription"];
				$db->query("UPDATE organisme set prochain_id_inscription=prochain_id_inscription+1 where id=$id_organisme ");
				$db->query("INSERT into individu_inscription" . " (id_individu, id_organisme,id_inscription ,id_type_inscription,id_creation, id_modification, date_creation, date_modification, date_inscription)" . " VALUES ( $id_individu_1,$id_organisme,$id_inscription,$id_typeinscription,$userid,$userid,UTC_DATE(),UTC_TIMESTAMP(), UTC_TIMESTAMP())");
				$db->query("UPDATE db_sequence set nextid=nextid+1 where seq_name='seq_individu_inscription' ");
			}
		}
		$requete = "DELETE  FROM tmp_copier_coller where nom_variable='id_individu' and id_utilisateur='" . $userid . "' ";
		$db->query($requete);
		$db->commit();
		$this->redirect();

	}
	function type_display ($record, $mode) {
		$id_type=$record["id_type_inscription"];
		$retour=$this->descripteur_type_inscription($id_type,'o',null);
		$retour.="<br /><br />".$this->descripteur_organisme($record["id_organisme"],'n','o','50');
		($this->nombre_display ($record, $mode)!="") ? $retour.="<br /></b>Inscriptions : <b>".$this->nombre_display ($record, $mode) : null;
		($this->nombre_cotisations_dues_display ($record, $mode)!="") ? $retour.="<br /></b>Cotisations payées / dues : <b>".$this->nombre_cotisations_payees_display ($record, $mode)." / ".$this->nombre_cotisations_dues_display ($record, $mode): null;
		($this->rappels_display ($record, $mode)!="") ? $retour.="<br /></b>Rappels : <b>".$this->rappels_display ($record, $mode): null;


		return $retour;
	}
	

	function calcul_inscription($record,$an,$mode)
	{
		$id_type_inscription = $record["id_type_inscription"];
		$id_organisme = $record["id_organisme"];
		$db = & atkGetDb();
		$data = $db->getrows("select count(id) as nombre from individu_inscription i
				where i.id_type_inscription =$id_type_inscription
				and i.id_organisme=$id_organisme
				and year(i.date_inscription) = $an");


		if ($data[0]["nombre"] > 0) {
			return href(dispatch_url("individu.inscription_i", "admin", array (
					'atkfilter' => "individu_inscription.id_organisme=" . $record['id_organisme'] . " and individu_inscription.id_type_inscription=" . $record['id_type_inscription'] . "
				 and year(individu_inscription.date_inscription)=year( UTC_TIMESTAMP())-".$an.""
			), "dispatch.php"), text($data[0]["nombre"] ), SESSION_NESTED);
		} else {
			return "";
		}


	}

	function calcul_adhesion($record,$an,$mode=null)
	{
		$id_type_inscription = $record["id_type_inscription"];
		$id_organisme = $record["id_organisme"];
		$db = & atkGetDb();
		$data = $db->getrows("select count(id) as nombre from individu_inscription i
				where i.id_type_inscription = $id_type_inscription
				and i.id_organisme=$id_organisme
				and year(i.date_adhesion) = $an");

		//				and year(i.date_adhesion) = year( UTC_TIMESTAMP())-'.$an.'');



		if ($data[0]["nombre"] > 0) {
			return href(dispatch_url("individu.inscription_i", "admin", array (
					'atkfilter' => "individu_inscription.id_organisme=" . $record['id_organisme'] . " and individu_inscription.id_type_inscription=" . $record['id_type_inscription'] . "
				 and year(individu_inscription.date_adhesion)=year( UTC_TIMESTAMP())-".$an.""
			), "dispatch.php"), text($data[0]["nombre"] ), SESSION_NESTED);
		} else {
			return "";
		}


	}

	function calcul_radiation($record,$an,$mode)
	{
		$id_type_inscription = $record["id_type_inscription"];
		$id_organisme = $record["id_organisme"];
		$db = & atkGetDb();
		$data = $db->getrows("select count(id) as nombre from individu_inscription i
				where i.id_type_inscription =$id_type_inscription
				and i.id_organisme=$id_organisme
				and year(i.date_radiation) =$an");


		if ($data[0]["nombre"] > 0) {
			return href(dispatch_url("individu.inscription_i", "admin", array (
					'atkfilter' => "individu_inscription.id_organisme=" . $record['id_organisme'] . " and individu_inscription.id_type_inscription=" . $record['id_type_inscription'] . "
				 and year(individu_inscription.date_radiation)=year( UTC_TIMESTAMP())-".$an.""
			), "dispatch.php"), text($data[0]["nombre"] ), SESSION_NESTED);
		} else {
			return "";
		}


	}

	function calcul_cotisation($record,$an,$mode)
	{
		$id_type_inscription = $record["id_type_inscription"];
		$id_organisme = $record["id_organisme"];
		$db = & atkGetDb();
		$data = $db->getrows("select count(ii.id_individu) as nombre
				from individu_inscription ii,
				individu_cotisation ic,
				organisme_cotisation oc
				where ii.id_type_inscription = $id_type_inscription
				and ii.id_organisme=$id_organisme
				and ii.id_individu=ic.id_individu
				and ic.id_organisme=$id_organisme
				and ic.id_cotisation=oc.id
				and oc.annee = $an");


		if ($data[0]["nombre"] > 0) {
			return href(dispatch_url("individu.inscription_i", "admin", array (
					'atkfilter' => "individu_inscription.id_organisme=" . $record['id_organisme'] . "
					and individu_inscription.id_type_inscription=" . $record['id_type_inscription'] . "
				 and individu_inscription.id_individu in
				 (select individu_cotisation.id_individu from
				 individu_cotisation,
				 organisme_cotisation
				 where
				 individu_cotisation.id_cotisation = organisme_cotisation.id
				 and
				 organisme_cotisation.annee=year( UTC_TIMESTAMP())-".$an."
				 and organisme_cotisation.id_organisme=" . $record['id_organisme'] . "
			)"
			), "dispatch.php"), text($data[0]["nombre"] ), SESSION_NESTED);
		} else {
			return "";
		}
	}

	function calcul_cotisation_federation($record,$an,$mode)
	{


		$id_type_inscription = $record["id_type_inscription"];
		$id_organisme = $record["id_organisme"];
		$db = & atkGetDb();
		$sql='select id_organisme_federation from organisme where id=' . $record["id_organisme"].'  ';
		$data = $db->getrows($sql);
		$id_federation=$data[0]["id_organisme_federation"];
		if ($id_federation=="")
		{
			return "";
		}
		$data = $db->getrows("select count(ii.id_individu) as nombre
				from individu_inscription ii,
				individu_cotisation ic,
				organisme_cotisation oc
				where ii.id_type_inscription =$id_type_inscription
				and ii.id_organisme=$id_organisme
				and ii.id_individu=ic.id_individu
				and ic.id_organisme=$id_federation
				and ic.id_cotisation=oc.id
				and oc.annee = $an");


		if ($data[0]["nombre"] > 0) {
			return href(dispatch_url("individu.inscription_i", "admin", array (
					'atkfilter' => "individu_inscription.id_organisme=" . $record['id_organisme'] . "
					and individu_inscription.id_type_inscription=" . $record['id_type_inscription'] . "
				 and individu_inscription.id_individu in
				 (select individu_cotisation.id_individu from
				 individu_cotisation,
				 organisme_cotisation
				 where
				 individu_cotisation.id_cotisation = organisme_cotisation.id
				 and
				 organisme_cotisation.annee=year( UTC_TIMESTAMP())-".$an."
				 and organisme_cotisation.id_organisme=" . $id_federation . "
			)"
			), "dispatch.php"), text($data[0]["nombre"] ), SESSION_NESTED);
		} else {
			return "";
		}


	}


	function rappels_display($record, $mode) {

		$id_type_inscription = $record["id_type_inscription"];
		$id_organisme = $record["id_organisme"];
		$retour='';
		$db = & atkGetDb();
		$data = $db->getrows(' select
				count(ii.effectuer_radiation_cotisation_o_n) as nombre
				from individu_inscription ii
				where ii.id_type_inscription = '.$id_type_inscription.'
				and ii.id_organisme=' . $id_organisme.'
				and ii.effectuer_radiation_cotisation_o_n=1
				');

		if ($data[0]["nombre"] > 0) {
			$retour.='Radiation(cotisation) : '.
					href(dispatch_url("individu.inscription_i", "admin", array (
							'atkfilter' => "individu_inscription.id_organisme=" .$id_organisme . "
							and individu_inscription.id_type_inscription=" . $id_type_inscription. "
							and individu_inscription.id_individu in
							(select individu_cotisation.id_individu from
							individu_cotisation
							where
							id_organisme=" . $id_organisme."
							and effectuer_radiation_cotisation_o_n=1
				 )"
					), "dispatch.php"), text($data[0]["nombre"]."<br />" ), SESSION_NESTED);
		} else {
			$retour.="";
		}


		$data = $db->getrows(' select
				count(ii. effectuer_radiation_adhesion_o_n) as nombre
				from individu_inscription ii
				where ii.id_type_inscription = '.$id_type_inscription.'
				and ii.id_organisme=' . $id_organisme.'
				and ii.effectuer_radiation_adhesion_o_n=1
				');

		if ($data[0]["nombre"] > 0) {
			$retour.='Radiation(adhésion) : '.
					href(dispatch_url("individu.inscription_i", "admin", array (
							'atkfilter' => "individu_inscription.id_organisme=" .$id_organisme . "
							and individu_inscription.id_type_inscription=" . $id_type_inscription. "
							and individu_inscription.id_individu in
							(select individu_cotisation.id_individu from
							individu_cotisation
							where
							id_organisme=" . $id_organisme."
							and effectuer_radiation_adhesion_o_n=1
				 )"
					), "dispatch.php"), text($data[0]["nombre"]."<br />" ), SESSION_NESTED);
		} else {
			$retour.="";
		}


		$data = $db->getrows(' select
				count(ii. reclamer_cotisation_o_n) as nombre
				from individu_inscription ii
				where ii.id_type_inscription = '.$id_type_inscription.'
				and ii.id_organisme=' . $id_organisme.'
				and ii.reclamer_cotisation_o_n=1
				');
		if ($data[0]["nombre"] > 0) {
			$retour.= 'Rappel cotisation : '.
					href(dispatch_url("individu.inscription_i", "admin", array (
							'atkfilter' => "individu_inscription.id_organisme=" .$id_organisme . "
							and individu_inscription.id_type_inscription=" . $id_type_inscription. "
							and individu_inscription.id_individu in
							(select individu_cotisation.id_individu from
							individu_cotisation
							where
							id_organisme=" . $id_organisme."
							and reclamer_cotisation_o_n=1
				 )"
					), "dispatch.php"), text($data[0]["nombre"]."<br />" ), SESSION_NESTED);
		} else {
			$retour.="";
		}


		$data = $db->getrows(' select
				count(ii. creer_adresse_postale_o_n) as nombre
				from individu_inscription ii
				where ii.id_type_inscription = '.$id_type_inscription.'
				and ii.id_organisme=' . $id_organisme.'
				and ii.creer_adresse_postale_o_n=1
				');
		if ($data[0]["nombre"] > 0) {
			$retour.= 'Manque adresse postale : '.
					href(dispatch_url("individu.inscription_i", "admin", array (
							'atkfilter' => "individu_inscription.id_organisme=" .$id_organisme . "
							and individu_inscription.id_type_inscription=" . $id_type_inscription. "
							and individu_inscription.id_individu in
							(select individu_cotisation.id_individu from
							individu_cotisation
							where
							id_organisme=" . $id_organisme."
							and creer_adresse_postale_o_n=1
				 )"
					), "dispatch.php"), text($data[0]["nombre"]."<br />" ), SESSION_NESTED);
		} else {
			$retour.="";
		}

		return $retour;

	}
	function get_titre_graphique($record)
	{
		$id_organisme=$record["id_organisme"];
		$id_type_inscription=$record["id_type_inscription"];
		$db = & atkGetDb();
		$data = $db->getrows(" select nom from organisme where id=$id_organisme");
		$retour= $data[0]["nom"];
		$data = $db->getrows(" select libelle from type_inscription where id=$id_type_inscription");
		$retour.= " - ".$data[0]["libelle"];
		return $retour;
	}

	function stats_inscriptions_display(&$record, $mode)
	{
		$titre=$this->get_titre_graphique($record);
		$AnMinimum=$this->getAnMinimum($record);

		if ($AnMinimum>0)
		{

			$res = $titre."<table border='1'>";
			$res.= $this->getEnTete($AnMinimum);
			$AnDepart=date("Y");
			// inscriptions
			$res .= "<tr><td class='styletitre'>Inscriptions";
			for($i=$AnMinimum; $i<=$AnDepart; $i++)
			{
		//		$res.='</td><td>'.$this->nombre_format($this->calcul_inscription($record,$i,$mode),"b");
				$res.='</td><td>'.$this->calcul_inscription($record,$i,$mode);
			}
			$res.='</td></tr>';
			// adhésions
			$res .= "<tr><td class='styletitre'>Adhésions";
			for($i=$AnMinimum; $i<=$AnDepart; $i++)

			{
	//			$res.='</td><td>'.$this->nombre_format($this->calcul_adhesion($record,$i,$mode),"b");
				$res.='</td><td>'.$this->calcul_adhesion($record,$i,$mode);
			}
			$res.='</td></tr>';
			// cotisations
			$res .= "<tr><td class='styletitre'>Cotisations";
			for($i=$AnMinimum; $i<=$AnDepart; $i++)
			{
	//			$res.='</td><td>'.$this->nombre_format($this->calcul_cotisation($record,$i,$mode),"b");
				$res.='</td><td>'.$this->calcul_cotisation($record,$i,$mode);
			}
			$res.='</td></tr>';
			// cotisations_federation
			$res .= "<tr><td class='styletitre'>Cotisations Fédération";
			for($i=$AnMinimum; $i<=$AnDepart; $i++)
			{
	//			$res.='</td><td>'.$this->nombre_format($this->calcul_cotisation_federation($record,$i,$mode),"b");
				$res.='</td><td>'.$this->calcul_cotisation_federation($record,$i,$mode);
			}
			$res.='</td></tr>';

			// radiations
			$res .= "<tr><td class='styletitre'>Radiations";
			for($i=$AnMinimum; $i<=$AnDepart; $i++)
			{
	//			$res.='</td><td>'.$this->nombre_format($this->calcul_radiation($record,$i,$mode),"b");
				$res.='</td><td>'.$this->calcul_radiation($record,$i,$mode);
				
			}
			$res.='</td></tr></table>'.$this->getUserStamp('n','o');
			
			
			$record["graphique"]=$this->afficheGraphique($res,$titre);
			
				return $res;
		}
	}

	function stats_inscriptions_graphique_display($record, $mode)
	{
		return $record["graphique"];
	
	}


	function getAnMinimum($record)
	{
		// adhésions
		$id_type_inscription = $record["id_type_inscription"];
		$id_organisme = $record["id_organisme"];
		$db = & atkGetDb();
		$AnMinimum=2013;
		$data = $db->getrows("select min(year(i.date_adhesion)) as an_minimum_adhesion from individu_inscription i
				where i.id_type_inscription =$id_type_inscription
				and i.id_organisme=$id_organisme
				and year(i.date_adhesion)>2003 ");
		($data[0]["an_minimum_adhesion"]=="" || $AnMinimum<$data[0]["an_minimum_adhesion"]) ? null : $AnMinimum=$data[0]["an_minimum_adhesion"];
		// cotisations
		$data = $db->getrows("select min(oc.annee) as an_minimum_cotisation
				from individu_inscription ii,
				individu_cotisation ic,
				organisme_cotisation oc
				where ii.id_type_inscription = $id_type_inscription
				and ii.id_organisme=$id_organisme
				and ii.id_individu=ic.id_individu
				and ic.id_organisme=$id_organisme
				and ic.id_cotisation=oc.id
				and oc.annee>2003 ");
		($data[0]["an_minimum_cotisation"]=="" || $AnMinimum<$data[0]["an_minimum_cotisation"]) ? null : $AnMinimum=$data[0]["an_minimum_cotisation"];
		// cotisations_federation
		$sql="select id_organisme_federation from organisme where id=$id_organisme";
		$data = $db->getrows($sql);
		$id_federation=$data[0]["id_organisme_federation"];

		if ($id_federation>0)
		{
			$data = $db->getrows(" select min(oc.annee) as an_minimum_cotisation_federation
					from individu_inscription ii,
					individu_cotisation ic,
					organisme_cotisation oc
					where ii.id_type_inscription =$id_type_inscription
					and ii.id_organisme=$id_organisme
					and ii.id_individu=ic.id_individu
					and ic.id_organisme=$id_federation
					and ic.id_cotisation=oc.id
					and oc.annee>2003 ");
			($data[0]["an_minimum_cotisation_federation"]=="" || $AnMinimum<$data[0]["an_minimum_cotisation_federation"]) ? null : $AnMinimum=$data[0]["an_minimum_cotisation_federation"];
		}
		// Inscriptions
		$data = $db->getrows(" select min(year(i.date_inscription)) as an_minimum_inscription from individu_inscription i
				where i.id_type_inscription =$id_type_inscription
				and i.id_organisme=$id_organisme
				and year(i.date_inscription)>2003 ");

		($data[0]["an_minimum_inscription"]=="" || $AnMinimum<$data[0]["an_minimum_inscription"]) ? null : $AnMinimum=$data[0]["an_minimum_inscription"];

		// Radiations
		$db = & atkGetDb();
		$data = $db->getrows(" select min(year(i.date_radiation)) as an_minimum_radiation from individu_inscription i
				where i.id_type_inscription =$id_type_inscription
				and i.id_organisme=$id_organisme
				and year(i.date_radiation)>2003 ");
		($data[0]["an_minimum_radiation"]=="" || $AnMinimum<$data[0]["an_minimum_radiation"]) ? null : $AnMinimum=$data[0]["an_minimum_radiation"];
		return $AnMinimum;
	}
	function getEnTete($AnMinimum)
	{
		$AnDepart=date("Y");
		$res = "<tr><td class='styletitre'>Année";
		//		for($i=$AnDepart; $i>$AnMinimum; $i--)
		for($i=$AnMinimum; $i<=$AnDepart; $i++)
		{
			$res.='</td><td>'.'<p style="text-align: center;  margin-top:0px; margin-bottom:0px">'.$i.'</p>';
			
		}
			
		$res.='</td></tr>';
		return $res;
	}
 
/*	function afficheGraphique($res,$titre)
	{

		$lineChart = new gLineChart(700,160);
		$tx = new tableExtractor;
		$tx->source = $res;
		$tx->anchorWithin = false;
		$tx->anchor = null;
		$tx->stripTags = true;
		$tx->headerRow = false;
		$tableArray = $tx->extractTable();
		$titreaxex=array_shift($tableArray[1]);
		$annees=$tableArray[1];
		$start=$tableArray[1][2];
		$count=count($tableArray[1]);
		$end=$tableArray[1][$count];
		$legend=array();
		$min="";
		$max=0;
		$count=count($tableArray);
		for ($i=2;$i<=$count;$i++)
		{
			$count1=count($tableArray[$i]);
			$legend[]=$tableArray[$i][1];
			$dataset=array();
			for ($j=2;$j<=$count1;$j++)
			{
				($tableArray[$i][$j]=="") ? $tableArray[$i][$j]=0 : null;
				($tableArray[$i][$j]>$max) ? $max=$tableArray[$i][$j] : null;
				($min=="" || $tableArray[$i][$j]<$min) ? $min=$tableArray[$i][$j] : null;
				$dataset[]=$tableArray[$i][$j];
			}
			$lineChart->addDataSet($dataset);
		}
		$lineChart->setVisibleAxes(array('y','x'));
		$lineChart->setLegend($legend);
		$lineChart->setDataRange($min,$max);
		$lineChart->addAxisRange(0, $min, $max);
		$lineChart->addAxisLabel(1, $annees);
		$lineChart->setGridLines(10, 10);
//		$lineChart->setColors(array("ff3344", "11ff11", "22aacc", "3333aa", "11ffff"));
		$lineChart->setColors(array("11ff11", "11ffff", "FF00FF", "000000", "ff3344"));
		$lineChart->setTitle($titre);
		$lineChart->setLineStyles(array("3", "3", "3", "3", "3"));
		$url=$lineChart->getUrl();
// 		$url.=$url."&chls=3|3|3|3|3";
		$retour.='<img src="'.$url.'" />';

		return $retour;

	}
	*/
	function getMax($ArrayToCheck){
		$maxValue = 1;

		foreach($ArrayToCheck as $temp){
			if(is_array($temp)){
				$maxValue = max($maxValue, utility::getMaxOfArray($temp));
			}
			else{
				$maxValue = max($maxValue, $temp);
			}
		}
		return $maxValue;
	}







} // end node v_organisme_inscription
?>