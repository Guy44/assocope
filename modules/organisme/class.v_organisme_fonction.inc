<?php
/***********************************************************************
	ATK Node: v_organisme_fonction
	Table: v_organisme_fonction
	Date: 07/30/07

	
	This code was automatically generated by ATK Code Generator v2.2
	
	@Author Jorge Garifuna (GariDigital.com) <info@GariDigital.com>
	
	Your are free to modify this code to fit your needs. 
	All I ask for is for your to keep this notice on top of the code
************************************************************************/
class v_organisme_fonction extends assMetaNode {
	var $table = "v_organisme_fonction";
	var $primary_field = "";
	var $module = "v_organisme_fonction";
	var $node = "v_organisme_fonction";
	var $index_field = "organisme";
	var $order_field = "fonction";
	var $descriptor_field = "[organisme]";
	// start constructor
	function v_organisme_fonction() {
		// tabs labels
		// call constructor parent
		$this->atkMetaNode(array (
			"flags" => NF_READONLY | NF_MRA
		));
		//event log
		$this->addListener(atknew("atk.utils.atkeventlog"));
		// node attributes
		$this->add(new atkRowCounter("#"), NULL, 1);
		$this->add(new atkAttribute("organisme", AF_SEARCHABLE), NULL, 0);
		$this->add(new atkAttribute("fonction", 0), NULL, 100);
		$this->add(new atkAttribute("nombre", 0), NULL, 200);
		$this->add(new atkNumberAttribute("id_organisme", AF_PRIMARY | AF_HIDE_EDIT | AF_HIDE_LIST, 10, 0), NULL, 1100);
		$this->add(new atkNumberAttribute("id_type_fonction", AF_PRIMARY | AF_HIDE_EDIT | AF_HIDE_LIST, 10, 0), NULL, 1200);
		$this->setExtendedSearchAction('smartsearch');
		$this->setSecurityAlias("organisme.organisme");
		$this->m_securityMap["liste_organismes_représentés"] = "view";
		include_once (atkconfig("atkroot") . "modules/include/actions.inc");
		$this->setIndex($this->index_field); // set index attribute
		$this->setOrder($this->order_field); // set order attribute(s)
		$this->setTable($this->table); // set node table
	} // end constructor
	function meta(& $policy) {
	} // end function
function organisme_display($record, $mode) {
		return $this->descripteur_organisme($record["id_organisme"],'n','o','50');
	}

   function recordActions($rec, &$actions, &$mraactions)
  {
			  parent::recordActions($rec, $actions, $mraactions);
			  	$mraactions['exportations'] = "exportations";
			  		$mraactions['liste_organismes_représentés'] = "liste_organismes_représentés";

	}
		
		function action_exportations() {

		if (is_array($this->m_postvars["atkselector"])) {
			$select = $this->m_postvars["atkselector"];
		} else {
			$select[0] = $this->m_postvars["atkselector"];
		}
		$this->traitement_select($select,$idorganisme,$idindividus,$idfonctions);
		$url = dispatch_url("organisme.organisme", "listeecran", array (
			"id" => $idorganisme,
			"idindividus" =>  $idindividus,
			"idfonctions" => $idfonctions,
			"atkcode"=>'22',
			"atkexport"=>'o'
		));
		header("Location: $url");
		exit;
	}

	function traitement_select($select,&$idorganisme,&$idindividus,&$idfonctions)
	{
		$db = & atkGetDb();
		foreach ($select as $id_variable) {
			$array_1 = explode('AND', $id_variable);
			$array_organisme = $array_1[0];
			$array_type = explode('=', $array_1[1]);
			$chaineidfonction .= $array_type[1] . ',';
		}
		$array_organisme = str_replace("v_organisme_fonction", "individu_fonction", $array_organisme);
		$chaineidfonction = substr($chaineidfonction, 0, strlen($chaineidfonction) - 1);
		$idfonctions=$chaineidfonction;
		$sql = 'select distinct id_individu from individu_fonction
		 where ' . $array_organisme . ' and date_fin is null and id_fonction in (' . $chaineidfonction . ')';
		$data = $db->getrows($sql);
		for ($i = 0; $i < count($data); $i++) {
			$chaineidindividu .= $data[$i]["id_individu"] . ',';
		}
		$idindividus = substr($chaineidindividu, 0, strlen($chaineidindividu) - 1);
		$idorg = explode('=', $array_organisme);
		$idorganisme = $idorg[1];
		return true;
		
		
		
	}
	
	function action_liste_organismes_representes() {

			if (is_array($this->m_postvars["atkselector"])) {
			$select = $this->m_postvars["atkselector"];
		} else {
			$select[0] = $this->m_postvars["atkselector"];
		}
	$db = & atkGetDb();
			foreach ($select as $id_variable) {
			$array_1 = explode('AND', $id_variable);
			$array_organisme = $array_1[0];
			$array_type = explode('=', $array_1[1]);
			$chaineidfonction .= $array_type[1] . ',';
		}
	$idfonctions = substr($chaineidfonction, 0, strlen($chaineidfonction) - 1);
			$array_organisme = str_replace("v_organisme_fonction", "individu_fonction", $array_organisme);
			
			$sql = 'select distinct id_organisme_represente from individu_fonction
				  where  ' . $array_organisme . ' and date_fin is null and id_fonction in (' . $idfonctions . ')';
		$data = $db->getrows($sql);
		for ($i = 0; $i < count($data); $i++) {
		if ($data[$i]["id_organisme_represente"]!="")
{$chaineidorganisme .= $data[$i]["id_organisme_represente"] . ',';}
			
		}
		$idorganismes = substr($chaineidorganisme, 0, strlen($chaineidorganisme) - 1);
		if ($idorganismes=="")
		{ return true;}
		$url = dispatch_url("organisme.organisme", "liste_organismes", array (
			"idorganismes" => $idorganismes,
			"atkcode" => 'liste_organismes',
			"atkexport" => 'n'
			));
			header("Location: $url");
			exit;
	}
	
	
	function nombre_display($record, $mode) {
		if ($record["nombre"] > 0) {
			return href(dispatch_url("individu.fonction_i", "admin", array (
				'atkfilter' => "individu_fonction.id_organisme=" . $record['id_organisme'] . " and individu_fonction.id_fonction=" . $record['id_type_fonction'] . ""
			), "dispatch.php"), text($record["nombre"]), SESSION_NESTED);
		} else {
			return "";
		}
	}
	function action_admin(& $handler) {
		global $config_recordsperpage;
		$config_recordsperpage = 50;
		return $handler->action_admin();
	}
	function action_save(& $handler) {
		$attr = & $this->getAttribute($this->primary_field);
		$attr->removeFlag(AF_PRIMARY);
		return $handler->action_save();
	} // end function 
	// end function
	/* START NODE MESSAGING */
	// this function is automatically called after a record has been updated
	function postUpdate($record) {
		// notify the user that the record has been updated
		$this->printMessage("Record, " . $record[$this->index_field] . ", Updated Successfully");
		return true;
	}
	// this function is automatically called after a record has been deleted			
	function postDelete($record) {
		// notify the user that the record has been deleted
		$this->printMessage("Record, " . $record[$this->index_field] . ", Deleted Successfully");
		return true;
	}
	// this function is automatically called after a record has been added
	function postAdd(& $record) {
		$this->getMyLastId($record);
		// notify the user that the record has been created
		$this->printMessage("Record, " . $record[$this->index_field] . ", Created Successfully");
		return true;
	}
	/*
	     Jorge Garifuna - info@garidigital.com
	     created: 9/12/06
	     
	     this function obtains the last inserted id of specified table 
	*/
	function getMyLastId(& $record) {
		$db = & atkGetDb();
		// get the id of the last record that was inserted
		$query = "select max(" . $this->primary_field . ") as last_id from " . $this->table;
		$rows = $db->getrows($query);
		if (count($rows) > 0) {
			$id = $rows[0]["last_id"];
			$record[$this->primary_field] = $id;
			$record["atkprimkey"] = $this->node . "." . $this->primary_field . "='$id'";
		}
	}
	/*
	     This function is a wrapper to print messages to the top of the screen
	     Author: Jorge Garifuna (GariDigital.com) <info@GariDigital.com>
	     Created Date: 6/27/06
	
	     @param $message               The actual message to be printed
	     @param $background_color      The background color of the bar to show message
	     @param $text_color            The color of the text to be printed
	     
	     Note:
	     - If your visual creativity is bad like mine, you can find nice colors at the following site:
	          http://www.colorcombos.com/index.html
	          
	     - Make sure to include "atkimport("atk.utils.atkmessagequeue");" at the top of your node 
	
	*/
	function printMessage($message, $background_color = '#6787B0', $text_color = 'white') {
		atkMessageQueue :: addMessage("<div style='background-color: " . $background_color . ";'><b><font color='" . $text_color . "'>" . $message . "</font></b></div>"); //     FFAB35          
	}
	/* END NODE MESSAGING */
	function descriptor_def() {
		return $this->descriptor_field;
	}
	// used for header section of list view page
	function adminHeader() {
		// get messages from the queue
		$msgs = atkMessageQueue :: getMessages();
		if (count($msgs) > 0) {
			$msgs = implode("<br>", $msgs);
		} else {
			$msgs = "";
		}
		$help_text = $msgs . "
		                    
				          <!-- h1><font color=#FF6347>v_organisme_fonction</font></h1 -->
				     ";
		return $help_text;
	} // end function
	// used for footer section of list view page
	// this function is called when editing an individual record
	// any information here will be displayed on the footer section of the edited record page
	function editPage(& $handler, $record, $locked = false) {
		return $this->detailPageFooter($handler, $record, $locked);
	}
	// this function is called when viewing an individual record
	// any information here will be displayed on the footer section of the viewed record page
	function viewPage(& $handler, $record, $locked = false) {
		return $this->detailPageFooter($handler, $record, $locked, "view");
	}
	// this is a custom helper function for editPage and viewPage
	// you can consolidate operations here unless you need to display different information
	// when editing and viewing the record
	// the information will be displayed on the footer page when editing or viewing an individual record	
	function detailPageFooter(& $handler, $record, $locked = false, $mode = "edit") {
		if ($mode == "view") {
			$page = $handler->viewPage($record, $locked);
		} else { // edit
			$page = $handler->editPage($record, $locked);
		}
		$data_info = "";
		$page .= $data_info;
		return $page;
	} // end function    
} // end node v_organisme_fonction
?>